import os
import json
import logging
from typing import List, Dict, Set
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from crud import async_session, get_chat_by_uuid

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_admin_usernames() -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    admins_str = os.getenv("ADMIN_USERNAMES", "[]")
    try:
        return json.loads(admins_str)
    except json.JSONDecodeError:
        logging.error(f"Invalid ADMIN_USERNAMES format: {admins_str}")
        return []

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤
NOTIFICATIONS_FILE = "admin_notifications.json"

def load_notification_settings() -> Dict[str, bool]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(NOTIFICATIONS_FILE):
            with open(NOTIFICATIONS_FILE, 'r') as f:
                return json.load(f)
    except Exception as e:
        logging.error(f"Error loading notification settings: {e}")
    return {}

def save_notification_settings(settings: Dict[str, bool]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(NOTIFICATIONS_FILE, 'w') as f:
            json.dump(settings, f)
    except Exception as e:
        logging.error(f"Error saving notification settings: {e}")

class NotificationManager:
    def __init__(self, bot):
        self.bot = bot
        self.admin_usernames = get_admin_usernames()
        self.notification_settings = load_notification_settings()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω—ã)
        for username in self.admin_usernames:
            if username not in self.notification_settings:
                self.notification_settings[username] = True
        save_notification_settings(self.notification_settings)
    
    def get_notification_keyboard(self, username: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        is_enabled = self.notification_settings.get(username, True)
        
        if is_enabled:
            button_text = "üîï –í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            callback_data = f"notifications_off_{username}"
        else:
            button_text = "üîî –í–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            callback_data = f"notifications_on_{username}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=button_text, callback_data=callback_data)]
        ])
        return keyboard
    
    async def send_waiting_notification(self, chat_id: int, chat_name: str, messager: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ–∂–∏–¥–∞—é—â–µ–º —á–∞—Ç–µ"""
        message_text = (
            f"üí¨ –ß–∞—Ç: {chat_name}\n"
            f"üì± –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: {messager.upper()}\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        for username in self.admin_usernames:
            if self.notification_settings.get(username, True):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º chat_id –∞–¥–º–∏–Ω–∞ –ø–æ username
                    admin_chat_id = await self.get_admin_chat_id(username)
                    if admin_chat_id:
                        await self.bot.send_message(
                            chat_id=admin_chat_id,
                            text=message_text,
                            reply_markup=self.get_notification_keyboard(username)
                        )
                except Exception as e:
                    logging.error(f"Error sending notification to {username}: {e}")
    
    async def get_admin_chat_id(self, username: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç chat_id –∞–¥–º–∏–Ω–∞ –ø–æ username"""
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –ø–æ username
        # –ü–æ–∫–∞ —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        admin_chat_ids = {}
        try:
            if os.path.exists("admin_chat_ids.json"):
                with open("admin_chat_ids.json", 'r') as f:
                    admin_chat_ids = json.load(f)
        except Exception as e:
            logging.error(f"Error loading admin chat IDs: {e}")
        
        return admin_chat_ids.get(username)
    
    async def save_admin_chat_id(self, username: str, chat_id: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –∞–¥–º–∏–Ω–∞"""
        admin_chat_ids = {}
        try:
            if os.path.exists("admin_chat_ids.json"):
                with open("admin_chat_ids.json", 'r') as f:
                    admin_chat_ids = json.load(f)
        except Exception as e:
            logging.error(f"Error loading admin chat IDs: {e}")
        
        admin_chat_ids[username] = chat_id
        
        try:
            with open("admin_chat_ids.json", 'w') as f:
                json.dump(admin_chat_ids, f)
        except Exception as e:
            logging.error(f"Error saving admin chat ID: {e}")
    
    async def toggle_notifications(self, username: str, chat_id: int):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        current_setting = self.notification_settings.get(username, True)
        self.notification_settings[username] = not current_setting
        save_notification_settings(self.notification_settings)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∞–¥–º–∏–Ω–∞
        await self.save_admin_chat_id(username, chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await self.bot.send_message(
            chat_id=chat_id,
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if self.notification_settings[username] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}",
            reply_markup=self.get_notification_keyboard(username)
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = None

def init_notification_manager(bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_manager
    notification_manager = NotificationManager(bot)
    return notification_manager

def get_notification_manager():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager 